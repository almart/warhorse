{#------------------------------------------------------------------------------
Azure Front Door (Standard) — generalized, no rules, cache bypassed by omission
- Origin host per stack matches your classic CDN template
- Host header to origin = endpoint’s *.azurefd.net FQDN (Nginx-friendly)
- Optional global override: warhorse.afd.global_origin_fqdn
------------------------------------------------------------------------------#}

{% set has_azure_cdn = (warhorse | to_nice_json | regex_search('(?i)"provider"\\s*:\\s*"azure"')) %}
{% set op_domain = (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
{% set global_origin = (warhorse.afd.global_origin_fqdn if (warhorse.afd is defined and warhorse.afd.global_origin_fqdn is defined) else None) %}
{% set strict_cert = true %}  {# flip to false if your origin certs don't match SNI #}

{# Azure-safe slug for resource names #}
{% macro slug(value, maxlen=60) -%}
{{ (value | regex_replace('[^A-Za-z0-9-]', '-') | trim('-') | lower)[:maxlen] | trim('-') }}
{%- endmacro %}

{% if has_azure_cdn %}
resource "azurerm_cdn_frontdoor_profile" "afd_profile_{{ warhorse.general.op_number }}" {
  name                = "{{ warhorse.general.op_number }}"
  resource_group_name = azurerm_resource_group.azure_resource_{{ warhorse.general.op_number }}.name
  sku_name            = "Standard_AzureFrontDoor"
}
{% endif %}

{% for vm in warhorse.vm %}

  {# ======================== COBALT STRIKE ======================== #}
  {% if vm.cobaltstrike.cdn is defined %}
    {% for cdn in vm.cobaltstrike.cdn if cdn.provider == 'azure' %}
      {% set pub_host    = cdn.hostname %}
      {% set origin_host = (global_origin if global_origin else ("cs-" ~ vm.name ~ "." ~ op_domain)) %}
      {% set ep_name     = slug(pub_host, 50) %}
      {% set og_name     = "og-" ~ slug(pub_host, 80) %}
      {% set origin_name = "org-" ~ ep_name ~ "-" ~ slug(origin_host, 30) %}
      {% set route_name  = "route-" ~ slug(pub_host, 80) %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_cs_{{ ep_name }}" {
  name                     = "{{ ep_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_cs_{{ ep_name }}" {
  name                     = "{{ og_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_cs_{{ ep_name }}" {
  name                          = "{{ origin_name }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_cs_{{ ep_name }}.id

  # TLS/SNI target (your real origin)
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443

  # Host header sent to origin = endpoint FQDN (*.azurefd.net)
  origin_host_header            = azurerm_cdn_frontdoor_endpoint.ep_cs_{{ ep_name }}.host_name

  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = {{ "true" if strict_cert else "false" }}
}

resource "azurerm_cdn_frontdoor_route" "route_cs_{{ ep_name }}" {
  name                          = "{{ route_name }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_cs_{{ ep_name }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_cs_{{ ep_name }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_cs_{{ ep_name }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

    {% endfor %}
  {% endif %}

  {# ========================== MYTHIC ============================= #}
  {% if vm.mythic.cdn is defined %}
    {% for cdn in vm.mythic.cdn if cdn.provider == 'azure' %}
      {% set pub_host    = cdn.hostname %}
      {% set origin_host = (global_origin if global_origin else ("mythic-" ~ vm.name ~ "." ~ op_domain)) %}
      {% set ep_name     = slug(pub_host, 50) %}
      {% set og_name     = "og-" ~ slug(pub_host, 80) %}
      {% set origin_name = "org-" ~ ep_name ~ "-" ~ slug(origin_host, 30) %}
      {% set route_name  = "route-" ~ slug(pub_host, 80) %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_mythic_{{ ep_name }}" {
  name                     = "{{ ep_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_mythic_{{ ep_name }}" {
  name                     = "{{ og_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_mythic_{{ ep_name }}" {
  name                          = "{{ origin_name }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_mythic_{{ ep_name }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = azurerm_cdn_frontdoor_endpoint.ep_mythic_{{ ep_name }}.host_name
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = {{ "true" if strict_cert else "false" }}
}

resource "azurerm_cdn_frontdoor_route" "route_mythic_{{ ep_name }}" {
  name                          = "{{ route_name }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_mythic_{{ ep_name }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_mythic_{{ ep_name }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_mythic_{{ ep_name }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

    {% endfor %}
  {% endif %}

  {# ========================= NIGHTHAWK =========================== #}
  {% if vm.nighthawk.cdn is defined %}
    {% for cdn in vm.nighthawk.cdn if cdn.provider == 'azure' %}
      {% set pub_host    = cdn.hostname %}
      {% set origin_host = (global_origin if global_origin else ("nh-" ~ vm.name ~ "." ~ op_domain)) %}
      {% set ep_name     = slug(pub_host, 50) %}
      {% set og_name     = "og-" ~ slug(pub_host, 80) %}
      {% set origin_name = "org-" ~ ep_name ~ "-" ~ slug(origin_host, 30) %}
      {% set route_name  = "route-" ~ slug(pub_host, 80) %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_nh_{{ ep_name }}" {
  name                     = "{{ ep_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_nh_{{ ep_name }}" {
  name                     = "{{ og_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_nh_{{ ep_name }}" {
  name                          = "{{ origin_name }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_nh_{{ ep_name }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = azurerm_cdn_frontdoor_endpoint.ep_nh_{{ ep_name }}.host_name
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = {{ "true" if strict_cert else "false" }}
}

resource "azurerm_cdn_frontdoor_route" "route_nh_{{ ep_name }}" {
  name                          = "{{ route_name }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_nh_{{ ep_name }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_nh_{{ ep_name }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_nh_{{ ep_name }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

    {% endfor %}
  {% endif %}

  {# ========================== EVILGINX2 ========================== #}
  {% if vm.evilginx2.cdn is defined %}
    {% for cdn in vm.evilginx2.cdn if cdn.provider == 'azure' %}
      {% set pub_host    = cdn.hostname %}
      {% set origin_host = (global_origin if global_origin else (vm.name ~ "." ~ op_domain)) %}
      {% set ep_name     = slug(pub_host, 50) %}
      {% set og_name     = "og-" ~ slug(pub_host, 80) %}
      {% set origin_name = "org-" ~ ep_name ~ "-" ~ slug(origin_host, 30) %}
      {% set route_name  = "route-" ~ slug(pub_host, 80) %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_eg2_{{ ep_name }}" {
  name                     = "{{ ep_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_eg2_{{ ep_name }}" {
  name                     = "{{ og_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_eg2_{{ ep_name }}" {
  name                          = "{{ origin_name }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_eg2_{{ ep_name }}.id

  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443

  # Match classic behavior: Host header = CDN endpoint FQDN
  origin_host_header            = azurerm_cdn_frontdoor_endpoint.ep_eg2_{{ ep_name }}.host_name

  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = {{ "true" if strict_cert else "false" }}
}

resource "azurerm_cdn_frontdoor_route" "route_eg2_{{ ep_name }}" {
  name                          = "{{ route_name }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_eg2_{{ ep_name }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_eg2_{{ ep_name }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_eg2_{{ ep_name }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

    {% endfor %}
  {% endif %}

  {# ============================ GOPHISH ========================== #}
  {% if vm.gophish.cdn is defined %}
    {% for cdn in vm.gophish.cdn if cdn.provider == 'azure' %}
      {% set pub_host    = cdn.hostname %}
      {% set origin_host = (global_origin if global_origin else (vm.gophish.site_hostname ~ "." ~ op_domain)) %}
      {% set ep_name     = slug(pub_host, 50) %}
      {% set og_name     = "og-" ~ slug(pub_host, 80) %}
      {% set origin_name = "org-" ~ ep_name ~ "-" ~ slug(origin_host, 30) %}
      {% set route_name  = "route-" ~ slug(pub_host, 80) %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_gp_{{ ep_name }}" {
  name                     = "{{ ep_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_gp_{{ ep_name }}" {
  name                     = "{{ og_name }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_gp_{{ ep_name }}" {
  name                          = "{{ origin_name }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_gp_{{ ep_name }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = azurerm_cdn_frontdoor_endpoint.ep_gp_{{ ep_name }}.host_name
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = {{ "true" if strict_cert else "false" }}
}

resource "azurerm_cdn_frontdoor_route" "route_gp_{{ ep_name }}" {
  name                          = "{{ route_name }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_gp_{{ ep_name }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_gp_{{ ep_name }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_gp_{{ ep_name }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

    {% endfor %}
  {% endif %}

{% endfor %}
