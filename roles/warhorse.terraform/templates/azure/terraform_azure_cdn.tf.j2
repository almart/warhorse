{#------------------------------------------------------------------------------
Azure Front Door (Standard) replacement for deprecated Azure CDN (classic)
- One Front Door profile per op_number if any vm.*.cdn entries use provider 'azure'
- For each tool (cobaltstrike, mythic, nighthawk, evilginx2, gophish):
    * Endpoint (public host)
    * Origin Group + Origin (with required load_balancing / health_probe)
    * Route: forwards all paths, HTTPS redirect on
      → No `cache {}` block ⇒ caching disabled for every request (bypass cache)
- No rules / rule sets (per your request)
------------------------------------------------------------------------------#}

{% set has_azure_cdn = (warhorse | to_nice_json | regex_search('(?i)"provider"\\s*:\\s*"azure"')) %}

{% if has_azure_cdn %}
resource "azurerm_cdn_frontdoor_profile" "afd_profile_{{ warhorse.general.op_number }}" {
  name                = "{{ warhorse.general.op_number }}"
  resource_group_name = azurerm_resource_group.azure_resource_{{ warhorse.general.op_number }}.name
  sku_name            = "Standard_AzureFrontDoor"
}
{% endif %}

{% for vm in warhorse.vm %}

  {# ======================== COBALT STRIKE ======================== #}
  {% if vm.cobaltstrike.cdn is defined %}
    {% for cdn in vm.cobaltstrike.cdn %}
      {% if cdn.provider == 'azure' %}
        {% set origin_host = "cs-" ~ vm.name ~ "." ~ (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
        {% set pub_host    = cdn.hostname %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_cs_{{ pub_host }}" {
  name                     = "{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_cs_{{ pub_host }}" {
  name                     = "og-{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  # Provider-required
  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_cs_{{ pub_host }}" {
  name                          = "{{ origin_host }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_cs_{{ pub_host }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = "{{ origin_host }}"
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = false
}

resource "azurerm_cdn_frontdoor_route" "route_cs_{{ pub_host }}" {
  name                          = "route-{{ pub_host }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_cs_{{ pub_host }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_cs_{{ pub_host }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_cs_{{ pub_host }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
  # No cache block → bypass cache globally
}

      {% endif %}
    {% endfor %}
  {% endif %}

  {# ========================== MYTHIC ============================= #}
  {% if vm.mythic.cdn is defined %}
    {% for cdn in vm.mythic.cdn %}
      {% if cdn.provider == 'azure' %}
        {% set origin_host = "mythic-" ~ vm.name ~ "." ~ (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
        {% set pub_host    = cdn.hostname %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_mythic_{{ pub_host }}" {
  name                     = "{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_mythic_{{ pub_host }}" {
  name                     = "og-{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_mythic_{{ pub_host }}" {
  name                          = "{{ origin_host }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_mythic_{{ pub_host }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = "{{ origin_host }}"
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = false
}

resource "azurerm_cdn_frontdoor_route" "route_mythic_{{ pub_host }}" {
  name                          = "route-{{ pub_host }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_mythic_{{ pub_host }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_mythic_{{ pub_host }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_mythic_{{ pub_host }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

      {% endif %}
    {% endfor %}
  {% endif %}

  {# ========================= NIGHTHAWK =========================== #}
  {% if vm.nighthawk.cdn is defined %}
    {% for cdn in vm.nighthawk.cdn %}
      {% if cdn.provider == 'azure' %}
        {% set origin_host = "nh-" ~ vm.name ~ "." ~ (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
        {% set pub_host    = cdn.hostname %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_nh_{{ pub_host }}" {
  name                     = "{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_nh_{{ pub_host }}" {
  name                     = "og-{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_nh_{{ pub_host }}" {
  name                          = "{{ origin_host }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_nh_{{ pub_host }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = "{{ origin_host }}"
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = false
}

resource "azurerm_cdn_frontdoor_route" "route_nh_{{ pub_host }}" {
  name                          = "route-{{ pub_host }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_nh_{{ pub_host }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_nh_{{ pub_host }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_nh_{{ pub_host }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

      {% endif %}
    {% endfor %}
  {% endif %}

  {# ========================== EVILGINX2 ========================== #}
  {% if vm.evilginx2.cdn is defined %}
    {% for cdn in vm.evilginx2.cdn %}
      {% if cdn.provider == 'azure' %}
        {% set origin_host = vm.name ~ "." ~ (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
        {% set pub_host    = cdn.hostname %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_eg2_{{ pub_host }}" {
  name                     = "{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_eg2_{{ pub_host }}" {
  name                     = "og-{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_eg2_{{ pub_host }}" {
  name                          = "{{ origin_host }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_eg2_{{ pub_host }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = "{{ origin_host }}"
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = false
}

resource "azurerm_cdn_frontdoor_route" "route_eg2_{{ pub_host }}" {
  name                          = "route-{{ pub_host }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_eg2_{{ pub_host }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_eg2_{{ pub_host }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_eg2_{{ pub_host }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

      {% endif %}
    {% endfor %}
  {% endif %}

  {# ============================ GOPHISH ========================== #}
  {% if vm.gophish.cdn is defined %}
    {% for cdn in vm.gophish.cdn %}
      {% if cdn.provider == 'azure' %}
        {% set origin_host = vm.gophish.site_hostname ~ "." ~ (warhorse.dns.op_domain_name | default(dns_op_domain_name)) %}
        {% set pub_host    = cdn.hostname %}

resource "azurerm_cdn_frontdoor_endpoint" "ep_gp_{{ pub_host }}" {
  name                     = "{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
}

resource "azurerm_cdn_frontdoor_origin_group" "og_gp_{{ pub_host }}" {
  name                     = "og-{{ pub_host }}"
  cdn_frontdoor_profile_id = azurerm_cdn_frontdoor_profile.afd_profile_{{ warhorse.general.op_number }}.id
  session_affinity_enabled = false

  load_balancing {
    sample_size                        = 4
    successful_samples_required        = 3
    additional_latency_in_milliseconds = 0
  }

  health_probe {
    protocol            = "Https"
    request_type        = "GET"
    path                = "/"
    interval_in_seconds = 120
  }
}

resource "azurerm_cdn_frontdoor_origin" "origin_gp_{{ pub_host }}" {
  name                          = "{{ origin_host }}"
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_gp_{{ pub_host }}.id
  host_name                     = "{{ origin_host }}"
  http_port                     = 80
  https_port                    = 443
  origin_host_header            = "{{ origin_host }}"
  priority                      = 1
  weight                        = 1000
  certificate_name_check_enabled = false
}

resource "azurerm_cdn_frontdoor_route" "route_gp_{{ pub_host }}" {
  name                          = "route-{{ pub_host }}"
  cdn_frontdoor_endpoint_id     = azurerm_cdn_frontdoor_endpoint.ep_gp_{{ pub_host }}.id
  cdn_frontdoor_origin_group_id = azurerm_cdn_frontdoor_origin_group.og_gp_{{ pub_host }}.id
  cdn_frontdoor_origin_ids      = [azurerm_cdn_frontdoor_origin.origin_gp_{{ pub_host }}.id]
  patterns_to_match             = ["/*"]
  supported_protocols           = ["Http", "Https"]
  forwarding_protocol           = "MatchRequest"
  https_redirect_enabled        = true
}

      {% endif %}
    {% endfor %}
  {% endif %}

{% endfor %}
